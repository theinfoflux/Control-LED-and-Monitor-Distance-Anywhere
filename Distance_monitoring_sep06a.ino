#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Distance monitoring"
  https://create.arduino.cc/cloud/things/6a5155d4-18a8-4e5a-90f4-ae0c86250a70 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int distance;
  bool led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "Adafruit_VL53L0X.h"
#define ledpin D5

Adafruit_VL53L0X lox = Adafruit_VL53L0X();

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
    pinMode(ledpin,OUTPUT);

  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
    Serial.println("Adafruit VL53L0X test");
  if (!lox.begin()) {
    Serial.println(F("Failed to boot VL53L0X"));
    while(1);
  }
  // power 
  Serial.println(F("VL53L0X API Simple Ranging example\n\n")); 
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
   // Your code here 
   VL53L0X_RangingMeasurementData_t measure;
    
  Serial.print("Reading a measurement... ");
  lox.rangingTest(&measure, false); // pass in 'true' to get debug data printout!
distance = ((measure.RangeMilliMeter)/10);
 Serial.print("Distance (cm): ");
 Serial.println(distance);
//  if (measure.RangeStatus != 4) {  // phase failures have incorrect data
//   // Serial.print("Distance (mm): "); Serial.println(measure.RangeMilliMeter);
//  } else {
//    Serial.println(" out of range ");
//  }
  
}

/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedChange()  {
  // Add your code here to act upon Led change
    if(led)
{
 digitalWrite(ledpin,HIGH); 
}
else{
  digitalWrite(ledpin,LOW);
}
}
